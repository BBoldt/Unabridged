
[tower]
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 0.75
	#Spacing between structures
	#Range: > 1
	spacing = 25
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 6
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:plains, #structure_gel:oak_forest, #structure_gel:dark_forest, #structure_gel:birch_forest, #structure_gel:mountain"
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"

[leviathan]
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 1.0
	#Spacing between structures
	#Range: > 1
	spacing = 36
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 8
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:desert"
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"

[snowy_temple]
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 1.0
	#Spacing between structures
	#Range: > 1
	spacing = 36
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 8
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:snowy_plains, #structure_gel:snowy_spruce_forest"
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"

[bigger_dungeon]
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 0.4
	#Spacing between structures
	#Range: > 1
	spacing = 12
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 5
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:overworld, !mushroom_fields, !mushroom_field_shore"
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"

[end_ruins]
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 0.8
	#Spacing between structures
	#Range: > 1
	spacing = 24
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 8
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:outer_end_island"
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:the_end"

[warped_garden]
	#Spacing between structures
	#Range: > 1
	spacing = 36
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 8
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:ocean, !#structure_gel:frozen"
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"

[soul_prison]
	#Spacing between structures
	#Range: > 1
	spacing = 25
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 6
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "minecraft:soul_sand_valley"
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:the_nether"

