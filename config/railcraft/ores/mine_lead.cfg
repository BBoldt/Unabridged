# Configuration file

ore {
    # The number of ore blocks generated during each successful event. Each chunk generally gets 216 generation events, but not all events result in ore spawn due to chance settings and noise fields. [range: 1 ~ 16, default: 6]
    I:blockCount=6

    # The y level that the mine will generate at. Generally you should keep this below 220 for vanilla height worlds. If your sea level is the normal 63, its usually best to stay below 50 as well due to the topsoil. [range: 10 ~ 2147483647, default: 30]
    I:depth=30

    # The scale of the gaussian distribution used to spread the mine vertically, how tall it is. Note that it spreads above and blow the y level equally, so a value of 3 is roughly 6 blocks tall. [range: 1 ~ 20, default: 3]
    I:range=3

    # The seed used to create the noise map. Generally it is set to the atomic number of the element being generated, but it can be anything you want. Should be unique for each generator or your mines will generate in the same places, which can be desirable if you want to mix ores like Iron and Nickel. [range: 0 ~ 2147483647, default: 82]
    I:seed=82

    # The generation type, can be either 'DIFFUSE' or 'MINE'. [default: MINE]
    S:type=MINE

    # The generator weight, larger weights generate later. You can use this to sort what order stuff is generated. [range: 0 ~ 2147483647, default: 100]
    I:weight=100

    ##########################################################################################################
    # retrogen
    #--------------------------------------------------------------------------------------------------------#
    # Retrogen settings. You must have the Railcraft-Retrogen mod installed for these to do anything.
    ##########################################################################################################

    retrogen {
        # Whether retrogen should be enabled on this generator. [default: false]
        B:retrogen=false

        # The marker used to indicate whether a chunk has generated this ore. Generally this should be unique each time you run retrogen. [default: RCRGMARK]
        S:retrogenMarker=RCRGMARK
    }

    ##########################################################################################################
    # dimensions
    #--------------------------------------------------------------------------------------------------------#
    # Control which dimensions the generator is allowed to generate in.
    # Generally they still require stone to generate in regardless, though this may become a config option in the future.
    # The system is permissive and will allow any dimension not blacklisted to be generated in.
    ##########################################################################################################

    dimensions {
        # Dimension IDs to disallow generation in. [default: [-1], [1]]
        S:dimensionBlacklist <
            -1
            1
         >

        # Dimension IDs to allow generation in. Overrides blacklists. [default: [0]]
        S:dimensionWhitelist <
            0
         >

        # World Provider classes to disallow generation in. [default: [net.minecraft.world.WorldProviderHell], [net.minecraft.world.WorldProviderEnd]]
        S:worldProvidersBlacklist <
            net.minecraft.world.WorldProviderHell
            net.minecraft.world.WorldProviderEnd
         >
    }

    ##########################################################################################################
    # biomes
    #--------------------------------------------------------------------------------------------------------#
    # Expects fully qualified Biome registry names.
    # See Biome.java in Minecraft/Forge for the names.
    # Format: <modid>:<biome_registry_name>.
    # '<modid>:all' can be used to specify all Biomes from a specific mod.
    ##########################################################################################################

    biomes {
        # Biome registry names where the ore will will not generate. Takes priority over the whitelist and types. [default: ]
        S:blacklist <
         >

        # Biome registry names where the ore will generate. Takes priority over types. [default: ]
        S:whitelist <
         >
    }

    ##########################################################################################################
    # biomestypes
    #--------------------------------------------------------------------------------------------------------#
    # Biome Dictionary types can be found in BiomeDictionary.java in Forge.
    # You can use 'ALL' to specify all types.
    ##########################################################################################################

    biomestypes {
        # Biome Dictionary types where the ore will will not generate. Takes priority over the whitelist. [default: ]
        S:blacklist <
         >

        # Biome Dictionary types where the ore will generate. [default: [ALL]]
        S:whitelist <
            ALL
         >
    }

    ##########################################################################################################
    # rich
    #--------------------------------------------------------------------------------------------------------#
    # Biomes where the ore will generator more richly.
    ##########################################################################################################

    rich {
        # Biome Dictionary types where the ore will generator more richly. You can use 'ALL' to specify all types. [default: [MOUNTAIN], [MESA], [HILLS]]
        S:biomeTypes <
            MOUNTAIN
            MESA
            HILLS
         >

        # Biomes where the ore will generator more richly. Expects fully qualified Biome registry names. '<modid>:all' can be used to specify all Biomes from a specific mod. [default: [minecraft:mesa]]
        S:biomes <
            minecraft:mesa
         >
    }

    ##########################################################################################################
    # ore
    #--------------------------------------------------------------------------------------------------------#
    # The ore blocks to be generated. Format: <modid>:<blockname>#<meta>
    ##########################################################################################################

    ore {
        # The ore block generated in the core of the mine. [default: railcraft:ore_metal#2]
        S:core=railcraft:ore_metal#2

        # The ore block generated on the fringe of the mine. [default: railcraft:ore_metal_poor#4]
        S:fringe=railcraft:ore_metal_poor#4
    }

    scale {
        # The scale of the noise map used to determine the boundaries of the mine. Very small changes can have drastic effects. Smaller numbers result in larger mines. Recommended to not change this. [range: 1.0E-6 ~ 1.0, default: 0.0018]
        S:cloud=0.0018

        # The scale of the noise map used to create the veins. Very small changes can have drastic effects. Smaller numbers result in larger veins. Recommended to not change this. [range: 1.0E-6 ~ 1.0, default: 0.015]
        S:vein=0.015
    }

    limits {
        # The limit of noise of the cloud layer above which core ore is generated. Lower numbers result in larger core areas. [range: 0.0 ~ 1.0, default: 0.9]
        S:core=0.9

        # The limit of noise of the cloud layer above which fringe ore is generated. Lower numbers result in larger, more common, fringe areas. [range: 0.0 ~ 1.0, default: 0.7]
        S:fringe=0.7

        # The limit of noise of the cloud layer above which core ore is generated in rich biomes. Lower numbers result in larger rich areas. [range: 0.0 ~ 1.0, default: 0.8]
        S:rich=0.8

        # The limit of noise of the vein layer below which ore is generated. Larger numbers result in larger veins. [range: 0.0 ~ 1.0, default: 0.25]
        S:vein=0.25
    }

    chances {
        # The percent chance that a generate event in a core area will result in ore spawning. [range: 0.0 ~ 1.0, default: 1.0]
        S:coreGen=1.0

        # The percent chance that a generate event in a core area will result in core ore spawning instead of fringe ore. Applied after coreGen. [range: 0.0 ~ 1.0, default: 0.2]
        S:coreOre=0.2

        # The percent chance that a generate event in a fringe area will result in ore spawning. [range: 0.0 ~ 1.0, default: 0.3]
        S:fringeGen=0.3
    }

}


